import asyncio
from bot.utils.logger import logger
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject
from aiogram.exceptions import TelegramRetryAfter, TelegramForbiddenError, TelegramBadRequest


class AntiFloodMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç Flood control (Too Many Requests)
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç TelegramRetryAfter –∏ –∂–¥—ë—Ç –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è.
    """

    def __init__(self, min_delay: float = 0.5):
        # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç (—Å–µ–∫—É–Ω–¥—ã)
        self.min_delay = min_delay
        self.last_message_time = {}
        super().__init__()

    async def __call__(self, handler, event: TelegramObject, data: dict):
        chat_id = getattr(getattr(event, "chat", None), "id", None)
        if chat_id:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            last_time = self.last_message_time.get(chat_id, 0)
            now = asyncio.get_event_loop().time()
            elapsed = now - last_time

            if elapsed < self.min_delay:
                await asyncio.sleep(self.min_delay - elapsed)

            self.last_message_time[chat_id] = now

        # –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º TelegramRetryAfter –≤–Ω—É—Ç—Ä–∏ —Å–∞–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
        while True:
            try:
                return await handler(event, data)
            except TelegramRetryAfter as e:
                wait = getattr(e, "retry_after", 5)
                logger.info(f"‚ö†Ô∏è Flood control: –∂–¥—É {wait} —Å–µ–∫ (chat_id={chat_id})")
                await asyncio.sleep(wait)
            except TelegramForbiddenError:
                logger.error(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                return
            except TelegramBadRequest as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ TelegramBadRequest: {e}", exc_info=True)
                return
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ middleware: {e}", exc_info=True)
                await asyncio.sleep(1)
                return
