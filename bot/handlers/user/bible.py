from bot.keyboards.user.bible import get_bible_search, get_bible_search_word, get_book_name_keyboard, get_chapter_help, get_chapter_help_by_testament, get_chapter_selection, get_menu_bible
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
import json
import asyncio
from aiogram.exceptions import TelegramRetryAfter

from bot.parsers.bible_search import parse_bible_search
from bot.utils.states import Bible

router = Router()

MAX_MESSAGE_LENGTH = 4000

@router.message(Command('bible'))
async def menu_newspaper(message: Message, state: FSMContext):
    await state.clear()
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bible"""
    await show_menu_bible(message)

@router.callback_query(F.data == 'bible')
async def menu_bible(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ë–∏–±–ª–∏—è' –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await show_menu_bible(callback, edit=True)

async def show_menu_bible(message_or_call, edit: bool = False):
    """–ú–µ–Ω—é –ë–∏–±–ª–∏—è"""
    text = (
    "üìö *–°–í–Ø–©–ï–ù–ù–û–ï –ü–ò–°–ê–ù–ò–ï* ‚Ä¢ *–ë–∏–±–ª–∏—è*\n\n"
    
    "‚ú® *–ë–æ–∂–∏–µ –°–ª–æ–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞*\n"
    "–ë–∏–±–ª–∏—è ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–Ω–∏–≥–∞, –∞ –∂–∏–≤–æ–µ –°–ª–æ–≤–æ –ë–æ–∂–∏–µ, "
    "—Å–ø–æ—Å–æ–±–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–∏—Ç—å –≤–∞—à—É –∂–∏–∑–Ω—å, –¥–∞—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –∏ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫–æ —Å–ø–∞—Å–µ–Ω–∏—é.\n\n"
    
    "üìñ *–í–ï–¢–•–ò–ô –ó–ê–í–ï–¢* ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–∏—Ö–æ–¥—É –°–ø–∞—Å–∏—Ç–µ–ª—è\n"
    "‚Ä¢ 39 –∫–Ω–∏–≥ ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è ‚Ä¢ –ó–∞–∫–æ–Ω ‚Ä¢ –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞ ‚Ä¢ –ú—É–¥—Ä–æ—Å—Ç—å\n\n"
    
    "üìò *–ù–û–í–´–ô –ó–ê–í–ï–¢* ‚Äî –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–µ—Ç–æ–≤–∞–Ω–∏–π –≤–æ –•—Ä–∏—Å—Ç–µ\n"
    "‚Ä¢ 27 –∫–Ω–∏–≥ ‚Ä¢ –ï–≤–∞–Ω–≥–µ–ª–∏—è ‚Ä¢ –£—á–µ–Ω–∏–µ –ê–ø–æ—Å—Ç–æ–ª–æ–≤ ‚Ä¢ –ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞\n\n"
    
    "üí´ *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —á—Ç–µ–Ω–∏—è:*"
    )
    markup = get_menu_bible()
    
    await asyncio.sleep(0.3)
    
    if edit and hasattr(message_or_call, 'message'):
        await message_or_call.message.edit_text(text, reply_markup=markup, parse_mode='Markdown')
    else:
        await message_or_call.answer(text, reply_markup=markup, parse_mode='Markdown')
        
@router.callback_query(F.data == 'chapter_help')
async def menu_chapter_help(callback: CallbackQuery):
    """–ú–µ–Ω—é –°–ø–∏—Å–æ–∫ –≥–ª–∞–≤"""
    text = (
"üìö *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥ –ë–∏–±–ª–∏–∏:*\n\n"
        "*–í–ï–¢–•–ò–ô –ó–ê–í–ï–¢:*\n"
        "‚Ä¢ –ë—ã—Ç–∏–µ, –ò—Å—Ö–æ–¥, –õ–µ–≤–∏—Ç, –ß–∏—Å–ª–∞, –í—Ç–æ—Ä–æ–∑–∞–∫–æ–Ω–∏–µ\n"
        "‚Ä¢ –ò–∏—Å—É—Å –ù–∞–≤–∏–Ω, –°—É–¥–µ–π, –†—É—Ñ—å, 1-4 –¶–∞—Ä—Å—Ç–≤\n"
        "‚Ä¢ 1-2 –ü–∞—Ä–∞–ª–∏–ø–æ–º–µ–Ω–æ–Ω, –ï–∑–¥—Ä–∞, –ù–µ–µ–º–∏—è, –ï—Å—Ñ–∏—Ä—å\n"
        "‚Ä¢ –ò–æ–≤, –ü—Å–∞–ª—Ç–∏—Ä—å, –ü—Ä–∏—Ç—á–∏, –ï–∫–∫–ª–µ—Å–∏–∞—Å—Ç, –ü–µ—Å–Ω—å –ü–µ—Å–Ω–µ–π\n"
        "‚Ä¢ –ò—Å–∞–∏—è, –ò–µ—Ä–µ–º–∏—è, –ü–ª–∞—á –ò–µ—Ä–µ–º–∏–∏, –ò–µ–∑–µ–∫–∏–∏–ª—å, –î–∞–Ω–∏–∏–ª\n"
        "‚Ä¢ –û—Å–∏—è, –ò–æ–∏–ª—å, –ê–º–æ—Å, –ê–≤–¥–∏–π, –ò–æ–Ω–∞, –ú–∏—Ö–µ–π\n"
        "‚Ä¢ –ù–∞—É–º, –ê–≤–≤–∞–∫—É–º, –°–æ—Ñ–æ–Ω–∏—è, –ê–≥–≥–µ–π, –ó–∞—Ö–∞—Ä–∏—è, –ú–∞–ª–∞—Ö–∏—è\n\n"
        "*–ù–û–í–´–ô –ó–ê–í–ï–¢:*\n"
        "‚Ä¢ –ú–∞—Ç—Ñ–µ—è, –ú–∞—Ä–∫–∞, –õ—É–∫–∏, –ò–æ–∞–Ω–Ω–∞, –î–µ—è–Ω–∏—è\n"
        "‚Ä¢ –†–∏–º–ª—è–Ω–∞–º, 1-2 –ö–æ—Ä–∏–Ω—Ñ—è–Ω–∞–º, –ì–∞–ª–∞—Ç–∞–º, –ï—Ñ–µ—Å—è–Ω–∞–º\n"
        "‚Ä¢ –§–∏–ª–∏–ø–ø–∏–π—Ü–∞–º, –ö–æ–ª–æ—Å—Å—è–Ω–∞–º, 1-2 –§–µ—Å—Å–∞–ª–æ–Ω–∏–∫–∏–π—Ü–∞–º\n"
        "‚Ä¢ 1-2 –¢–∏–º–æ—Ñ–µ—é, –¢–∏—Ç—É, –§–∏–ª–∏–º–æ–Ω—É, –ï–≤—Ä–µ—è–º\n"
        "‚Ä¢ –ò–∞–∫–æ–≤–∞, 1-2 –ü–µ—Ç—Ä–∞, 1-3 –ò–æ–∞–Ω–Ω–∞, –ò—É–¥—ã, –û—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ"   
    )
    markup = get_chapter_help()
    await callback.message.edit_text(text, reply_markup=markup, parse_mode='Markdown')
    
@router.callback_query(F.data.startswith('chapter_page_'))
async def menu_chapter_page(callback: CallbackQuery):
    """–ú–µ–Ω—é –ù–æ–≤—ã–π –∏–ª–∏ –≤–µ—Ç—Ö–∏–π –∑–∞–≤–µ—Ç"""
    testament_text = {
        'old': (
            "üìñ *–í–ï–¢–•–ò–ô –ó–ê–í–ï–¢*\n\n"
            
            "üåÖ *–û—Ç —Å–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –º–∏—Ä–∞ –¥–æ –†–æ–∂–¥–µ—Å—Ç–≤–∞ –•—Ä–∏—Å—Ç–æ–≤–∞*\n"
            "–ó–¥–µ—Å—å –∑–∞–ø–∏—Å–∞–Ω–∞ —Å–≤—è—â–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ç –ê–¥–∞–º–∞ –¥–æ –ø—Ä–æ—Ä–æ–∫–∞ –ú–∞–ª–∞—Ö–∏–∏, "
            "–∑–∞–∫–æ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ú–æ–∏—Å–µ—è, –º—É–¥—Ä—ã–µ –∏–∑—Ä–µ—á–µ–Ω–∏—è –°–æ–ª–æ–º–æ–Ω–∞ "
            "–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞ –æ –≥—Ä—è–¥—É—â–µ–º –ú–µ—Å—Å–∏–∏.\n\n"
            
            "‚≠ê *–ö–ª—é—á–µ–≤—ã–µ –∫–Ω–∏–≥–∏:*\n"
            "‚Ä¢ üèõÔ∏è *–ü—è—Ç–∏–∫–Ω–∏–∂–∏–µ –ú–æ–∏—Å–µ–µ–≤–æ* ‚Äî –æ—Å–Ω–æ–≤–∞ –ó–∞–∫–æ–Ω–∞\n"
            "‚Ä¢ üíé *–ü—Å–∞–ª—Ç–∏—Ä—å* ‚Äî –∑–æ–ª–æ—Ç—ã–µ –º–æ–ª–∏—Ç–≤—ã –î–∞–≤–∏–¥–∞\n"
            "‚Ä¢ üìú *–ü—Ä–æ—Ä–æ–∫–∏* ‚Äî –≥–æ–ª–æ—Å –ë–æ–∂–∏–π –∫ –Ω–∞—Ä–æ–¥—É\n"
            "‚Ä¢ üéì *–£—á–∏—Ç–µ–ª—å–Ω—ã–µ* ‚Äî –º—É–¥—Ä–æ—Å—Ç—å –¥–ª—è –∂–∏–∑–Ω–∏\n\n"
            
            "‚ú® *–ù–∞—á–Ω–∏—Ç–µ —Å:* –ë—ã—Ç–∏–µ, –ü—Å–∞–ª—Ç–∏—Ä—å –∏–ª–∏ –ü—Ä–∏—Ç—á–∏\n\n"
            
            "_¬´–í—Å—ë –ü–∏—Å–∞–Ω–∏–µ –±–æ–≥–æ–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –Ω–∞—É—á–µ–Ω–∏—è...¬ª_\n"
            "‚Äî 2 –¢–∏–º–æ—Ñ–µ—é 3:16"
        ),
        'new': (
            "üìò *–ù–û–í–´–ô –ó–ê–í–ï–¢*\n\n"
            
            "‚ú® *–û—Ç –†–æ–∂–¥–µ—Å—Ç–≤–∞ –•—Ä–∏—Å—Ç–æ–≤–∞ –¥–æ –≤–µ—á–Ω–æ—Å—Ç–∏*\n"
            "–ß–µ—Ç—ã—Ä–µ –ï–≤–∞–Ω–≥–µ–ª–∏—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é—Ç –æ –∂–∏–∑–Ω–∏, —Å–º–µ—Ä—Ç–∏ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–∏ –ò–∏—Å—É—Å–∞ –•—Ä–∏—Å—Ç–∞, "
            "–∞ –ø–æ—Å–ª–∞–Ω–∏—è –ê–ø–æ—Å—Ç–æ–ª–æ–≤ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –ø—É—Ç—å —Å–ø–∞—Å–µ–Ω–∏—è –∏ —Ö—Ä–∏—Å—Ç–∏–∞–Ω—Å–∫–æ–π –∂–∏–∑–Ω–∏.\n\n"
            
            "‚≠ê *–ö–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã:*\n"
            "‚Ä¢ ‚úùÔ∏è *–ï–≤–∞–Ω–≥–µ–ª–∏—è* ‚Äî –∂–∏–∑–Ω—å –∏ —É—á–µ–Ω–∏–µ –•—Ä–∏—Å—Ç–∞\n"
            "‚Ä¢ üåç *–î–µ—è–Ω–∏—è* ‚Äî —Ä–æ–∂–¥–µ–Ω–∏–µ –¶–µ—Ä–∫–≤–∏\n"
            "‚Ä¢ üíå *–ü–æ—Å–ª–∞–Ω–∏—è* ‚Äî –ø–∏—Å—å–º–∞ –ø–µ—Ä–≤—ã—Ö —Ö—Ä–∏—Å—Ç–∏–∞–Ω\n"
            "‚Ä¢ üîÆ *–û—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ* ‚Äî –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ –æ –±—É–¥—É—â–µ–º\n\n"
            
            "‚ú® *–ù–∞—á–Ω–∏—Ç–µ —Å:* –ï–≤–∞–Ω–≥–µ–ª–∏–µ –æ—Ç –ò–æ–∞–Ω–Ω–∞ –∏–ª–∏ –ï–≤–∞–Ω–≥–µ–ª–∏–µ –æ—Ç –õ—É–∫–∏\n\n"
            
            "_¬´–ò–±–æ —Ç–∞–∫ –≤–æ–∑–ª—é–±–∏–ª –ë–æ–≥ –º–∏—Ä, —á—Ç–æ –æ—Ç–¥–∞–ª –°—ã–Ω–∞ –°–≤–æ–µ–≥–æ –ï–¥–∏–Ω–æ—Ä–æ–¥–Ω–æ–≥–æ...¬ª_\n"
            "‚Äî –ò–æ–∞–Ω–Ω–∞ 3:16"
        )
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∑–∞–≤–µ—Ç–∞ –∏–∑ callback_data
    testament_type = callback.data.split('_')[-1]
    
    if testament_type in testament_text:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ—Ç–∞
        await callback.message.edit_text(
            testament_text[testament_type],
            reply_markup=get_chapter_help_by_testament(testament_type),
            parse_mode="Markdown"
        )
    else:
        # –ï—Å–ª–∏ —Ç–∏–ø –∑–∞–≤–µ—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
        await callback.message.edit_text(
            "üìñ *–í—ã–±–µ—Ä–∏—Ç–µ –ó–∞–≤–µ—Ç:*",
            reply_markup=get_chapter_help(),
            parse_mode="Markdown"
        )
    
    await callback.answer()
    
@router.callback_query(F.data.startswith('book_name_'))
async def menu_book_name(callback: CallbackQuery):
    """–ú–µ–Ω—é –í—ã–±–æ—Ä –ì–ª–∞–≤"""
    parts = callback.data.split('_')
    book_name = parts[-1]
    testament_type = parts[2] if len(parts) > 3 else 'old'
    text = (
        f"üìñ <b>{book_name}</b>\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É:"
    )
    markup = get_book_name_keyboard(book_name, testament_type)
    await callback.message.edit_text(
        text, reply_markup=markup
    )
    
@router.callback_query(F.data.startswith('chapter_'))
async def menu_chapter_selection(callback: CallbackQuery):
    """–ú–µ–Ω—é –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–æ–π –≥–ª–∞–≤—ã"""
    parts = callback.data.split('_')
    chapter_count = parts[-1]
    book_name = parts[1]
    
    with open('bot/cache/bible.json', 'r', encoding='utf-8') as file:
        data = json.load(file)
    
    book_data = data.get(book_name, {})
    chapter_data = book_data.get(chapter_count, {})
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤ –≤ –∫–Ω–∏–≥–µ
    total_chapters = len(book_data)
    current_chapter = int(chapter_count)
    
    header = f"üìñ <b>{book_name}</b> | –ì–ª–∞–≤–∞ {chapter_count}\n\n"
    footer = f"\nüìÑ <i>–ì–ª–∞–≤–∞ {current_chapter} –∏–∑ {total_chapters}</i>"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã
    text_content = ""
    for i, verse in chapter_data.items():
        text_content += f"{i}. {verse}\n"    
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
    parts = []
    while text_content:
        chunk = text_content[:MAX_MESSAGE_LENGTH]
        split_index = chunk.rfind('\n')
        if split_index == -1:
            split_index = len(chunk)
        parts.append(text_content[:split_index])
        text_content = text_content[split_index:].lstrip()
    
    markup = get_chapter_selection(book_name, current_chapter, total_chapters)
    
    # –ï—Å–ª–∏ –≥–ª–∞–≤–∞ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    if len(parts) == 1:
        text = header + parts[0] + footer
        try:
            await callback.message.edit_text(text, reply_markup=markup)
        except TelegramBadRequest:
            await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ ‚úÖ", show_alert=False)
        return

    # –ò–Ω–∞—á–µ: –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    # üîπ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
    first_message_text = header + parts[0]
    try:
        await callback.message.edit_text(first_message_text)
    except TelegramBadRequest:
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ ‚úÖ", show_alert=False)

    # üîπ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —á–∞—Å—Ç–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
    for part in parts[1:-1]:
        await callback.message.answer(part)
        await asyncio.sleep(0.5)

    # üîπ –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å ‚Äî —Å —Ñ—É—Ç–µ—Ä–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    last_part = parts[-1] + footer
    await callback.message.answer(last_part, reply_markup=markup)
    
@router.callback_query(F.data.startswith('chapters_page_'))
async def paginate_chapters(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≥–ª–∞–≤."""
    _, _, book_name, page = callback.data.split('_')
    page = int(page)
    markup = get_book_name_keyboard(book_name, page=page)
    await callback.message.edit_reply_markup(reply_markup=markup)
    await callback.answer()

@router.callback_query(F.data.startswith('book_name_back_'))
async def menu_back_to_chapters(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –≥–ª–∞–≤—ã –∫ –≤—ã–±–æ—Ä—É –≥–ª–∞–≤."""
    book_name = callback.data.split('_')[-1]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≥–ª–∞–≤
    text = (
        f"üìñ <b>{book_name}</b>\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É:"
    )
    markup = get_book_name_keyboard(book_name, testament_type='old')
    await callback.message.edit_text(text, reply_markup=markup)
    await callback.answer()

@router.callback_query(F.data == 'bible_search')
async def menu_bible_search(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –ü–æ–∏—Å–∫ –ø–æ –ë–∏–±–ª–∏–∏"""
    text = (
        "üîç *–ü–û–ò–°–ö –ü–û –ë–ò–ë–õ–ò–ò*\n\n"
        
        "‚ú® *–ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π –æ—Ç—Ä—ã–≤–æ–∫ –ü–∏—Å–∞–Ω–∏—è*\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤ –°–≤—è—â–µ–Ω–Ω–æ–º –ü–∏—Å–∞–Ω–∏–∏:\n\n"
        
        "üìñ *–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*\n"
        "‚Ä¢ _–ª—é–±–æ–≤—å_ - –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ _–Ω–∞–≥–æ—Ä–Ω–∞—è –ø—Ä–æ–ø–æ–≤–µ–¥—å_ - –Ω–∞–π—Ç–∏ –æ—Ç—Ä—ã–≤–æ–∫\n\n"
        
        "üí´ *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
        
        "‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∏–∂–µ:*"
    )
    markup = get_bible_search()
    await callback.message.edit_text(text, reply_markup=markup, parse_mode='Markdown')
    await state.set_state(Bible.bible_search)

@router.message(Bible.bible_search)
async def menu_process_bible_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∏—Å–∫–∞ –ø–æ –ë–∏–±–ª–∏–∏'"""
    
    user_request = message.text.strip()
    
    # ‚è≥ –ü–æ–∫–∞ –∏–¥—ë—Ç –ø–æ–∏—Å–∫ ‚Äî –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("üîé –ò—â—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...", show_alert=False)
    
    data = await parse_bible_search(user_request)
    
    if not data:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 
                             reply_markup=get_bible_search())
        await state.clear()
        return
    
    results = data['results']
    coincidences = data['coincidences']
    
    markup = get_bible_search_word()
    
    if coincidences == 0 or not results:
        await message.answer(
            f"üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{user_request}</b>",
            reply_markup=markup
        )
        await state.clear()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text_search = (
        f"üìñ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ª–æ–≤—É:</b> <i>{user_request}</i>\n"
        f"üî¢ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: <b>{coincidences}</b>\n\n"
    )
    
    text = text_search
    
    for idx, item in enumerate(results, start=1):
        text += f"{idx}. <b>{item['from_where']}</b>\n{item['text']}\n\n"
        
    # –î–µ–ª–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ (–µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç)
    parts = []
    while text:
        chunk = text[:MAX_MESSAGE_LENGTH]
        split_index = chunk.rfind('\n\n')
        if split_index == -1:
            split_index = len(chunk)
        parts.append(text[:split_index])
        text = text[split_index:].lstrip()
        
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤–ª–µ–∑–∞–µ—Ç
    if len(parts) == 1:
        try:
            await message.edit_text(parts[0], reply_markup=markup)
        except TelegramBadRequest:
            await message.answer(parts[0], reply_markup=markup)
    else:
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
        try:
            await message.edit_text(parts[0])
        except TelegramBadRequest:
            await message.answer(parts[0])
            
        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —á–∞—Å—Ç–∏ (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
        for p in parts[1:-1]:
            try:
                await message.answer(p)
                await asyncio.sleep(0.5)
            except TelegramRetryAfter as e:
                await message.answer(f"üîé –ò—â—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.retry_after} —Å–µ–∫...")
                print(f"‚è≥ Flood control: —Å–ø–∏–º {e.retry_after} —Å–µ–∫...")
                await asyncio.sleep(e.retry_after)
            
        # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å (—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π)
        results_searh = parts[-1]
        results_searh += text_search
        await message.answer(results_searh, reply_markup=markup)
        
    await state.clear()