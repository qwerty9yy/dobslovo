import html
from pathlib import Path
from aiogram import Router, F, types
from aiogram.types import CallbackQuery, InputMediaPhoto, Message
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from bot.handlers.user.menu_command import show_donate_menu, show_menu_about_us, show_menu_contacts, show_menu_newspaper, show_products_menu, show_start_menu
from bot.keyboards.user.keyboards import  get_menu_newspaper, get_show_bank
from bot.keyboards.user.products_keyboard import get_show_faq, get_show_price
from bot.parsers.archives_parser import parse_archives_page
from bot.parsers.products_parser import parse_products_page
from bot.utils.states import NewsPapers

router = Router()

@router.callback_query(F.data == "back_to_main")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    
    await state.clear()
    
    try:
        await show_start_menu(callback, edit=True)  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    except TelegramBadRequest:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞),
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await show_start_menu(callback, edit=False)  
    await callback.answer()      

@router.callback_query(F.data == "contacts")
async def menu_contacts(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ–Ω—Ç–∞–∫—Ç—ã'"""
    await show_menu_contacts(callback, edit=True)
    
@router.callback_query(F.data == "menu_about_us")
async def menu_about_us(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –Ω–∞—Å'"""
    await show_menu_about_us(callback, edit=True)
    
@router.callback_query(F.data == "donate")
async def menu_support_us(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å'"""
    await show_donate_menu(callback, edit=True)

@router.callback_query(lambda c: c.data == 'menu_products')
async def menu_products(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥—É–∫—Ü–∏—è' –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await show_products_menu(callback, edit=True)

@router.callback_query(F.data.startswith('bank_'))
async def support_us_callback(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±–∞–Ω–∫–∞."""
    bank_name = callback.data.split('_')[1]
    bank_description = {
        "sberbank": (
                    "üè¶ <b>–°–±–µ—Ä–±–∞–Ω–∫</b>\n\n"
                    "–ü–æ–ª—É—á–∞—Ç–µ–ª—å: <i>–°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤–∏—á –ö.</i>\n"
                    "–ö–∞—Ä—Ç–∞: <code>4276 6800 1260 0464</code>\n"
                    "–¢–µ–ª–µ—Ñ–æ–Ω, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∫–∞—Ä—Ç–µ: <code>+7 950 173 48 38</code>"
        ),
        "mtsbank": (
                    "üí≥ <b>–ú–¢–° –ë–∞–Ω–∫</b>\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞, –ø–æ–ø–æ–ª–Ω–∏–≤ –±–∞–ª–∞–Ω—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
                    "<code>+7 912 756 82 80</code>"
        ),
        "mailrussia": (
                    "üìÆ <b>–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏</b>\n\n"
                    "–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ—á—Ç–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤:\n"
                    "<i>427550, –£–¥–º—É—Ä—Ç—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞,\n"
                    "–ø. –ë–∞–ª–µ–∑–∏–Ω–æ, –∞/—è 24,\n"
                    "–ö–æ—â–µ–µ–≤—É –°–µ—Ä–≥–µ—é –ò–≤–∞–Ω–æ–≤–∏—á—É</i>"
        )
        }
    bank_info = bank_description.get(bank_name)
    markup = get_show_bank()
    if not bank_info:
        await callback.answer('‚ùå –°–ø–æ—Å–æ–± –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        return
        
    await callback.message.edit_text(
    bank_info, reply_markup=markup
    )

@router.callback_query(F.data == 'show_price')
async def menu_show_price(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¶–µ–Ω–∞ –≥–∞–∑–µ—Ç—ã' –∏–∑ –ü—Ä–æ–¥—É–∫—Ü–∏—è"""
    data = await parse_products_page() or {}
    main_price = data.get('price', "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üòî")
    price_delivery = data.get('price_delivery', [])
    text = (
        "üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö</b>\n\n"
        f"{main_price}\n\n"
    )
    if price_delivery:
        text += "üì¶ <b>–¶–µ–Ω—ã —Å –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π –ø–æ –†–æ—Å—Å–∏–∏:</b>\n"
        for count, price in price_delivery:
            text += f"‚Ä¢ {html.escape(count)}: <b>{html.escape(price)}</b>\n"
            
    markup = get_show_price()
    try:
        await callback.message.edit_text(text, reply_markup=markup)
    except TelegramBadRequest:
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ ‚úÖ", show_alert=False)

@router.callback_query(F.data == 'show_faq')
async def menu_show_faq(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã' –∏–∑ –ü—Ä–æ–¥—É–∫—Ü–∏—è"""
    data = await parse_products_page() or {}
    questions = data.get('popular_questions', [])
    
    if not questions:
        await callback.answer('–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã üòî', show_alert=True)
        return
    
    text = (
        '‚ùì <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n'
    )
    for question, answer in questions:
        text += f'üîπ <b>{html.escape(question)}</b>\n<blockquote>{html.escape(answer)}</blockquote>\n\n'
        
    markup = get_show_faq()
    try:
        await callback.message.edit_text(text, reply_markup=markup)
    except TelegramBadRequest:
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ ‚úÖ", show_alert=False)
    
@router.callback_query(F.data == 'newspaper')
async def menu_show_newspaper(callback: CallbackQuery): #, state: FSMContext
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–∞–∑–µ—Ç–∞'"""
    await show_menu_newspaper(callback, edit=True)
    # await state.set_state(NewsPapers.newspapers)
        
# @router.message(NewsPapers.newspapers)
# async def menu_process_years(message: Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–≤–µ–¥–µ–Ω–æ–≥–æ –≥–æ–¥–∞'"""
    
#     if message.text.startswith('/'):
#         await state.clear()
#         return
    
#     data = await parse_archives_page()
#     newspapers = data.get('newspapers', [])
    
#     if not newspapers:
#         await message.answer('–ê—Ä—Ö–∏–≤—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
#         await state.clear()
#         return
    
#     max_year = max(int(item['year']) for item in newspapers)
#     user_text = message.text
#     markup = get_menu_newspaper_search()
#     # –ü—Ä–æ–≤–µ—Ä–∫–∏
#     if not user_text.isdigit():
#         await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!', reply_markup=markup)
#         return
    
#     if len(user_text) != 4:
#         await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (4 —Ü–∏—Ñ—Ä—ã)', reply_markup=markup)
#         return
    
#     year = int(user_text)
    
#     if year < 2018:
#         await message.answer('‚ùå –í—ã–ø—É—Å–∫–æ–≤ –¥–æ 2018 –≥–æ–¥–∞ –Ω–µ—Ç –≤ –∞—Ä—Ö–∏–≤–∞—Ö', reply_markup=markup)
#         return
    
#     if year > max_year:
#         await message.answer(f'‚ùå –í—ã–ø—É—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ {max_year} –≥–æ–¥–∞', reply_markup=markup)
#         return
    
#     year_papers = [paper for paper in newspapers if int(paper['year']) == year]
    
#     if not year_papers:
#         await message.answer(f'‚ùå –ó–∞ {year} –≥–æ–¥ –≤—ã–ø—É—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', reply_markup=markup)
#         await state.clear()
#         return
    
#     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≥–∞–∑–µ—Ç—ã
#     text = f'üì∞ <b>–ì–∞–∑–µ—Ç—ã –∑–∞ {year} –≥–æ–¥:</b>\n\n'
#     for paper in year_papers:
#         text += f"‚Ä¢ {paper['title']}\n"
        
#     markup_papers = create_year_papers_keyboard(year_papers)
#     await message.answer(text, reply_markup=markup_papers)
#     await state.clear()

@router.callback_query(F.data.startswith('newspaper_'))
async def handle_newspaper_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–±–æ—Ä–∞ –≤—ã–ø—É—Å–∫–∞ –≥–∞–∑–µ—Ç—ã –≤–≤–µ–¥–µ–Ω–æ–≥–æ –≥–æ–¥–∞'"""
    try:
        parts = callback.data.split('_')    # ["newspaper", "2024", "1"]

        year = parts[1]
        issue = parts[2]

        data = await parse_archives_page()
        papers = data.get('newspapers', [])

        # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–∞–∑–µ—Ç—É
        selected_paper = next(
            (paper for paper in papers 
                if paper['year'] == year and paper['issue'] == issue),
            None
        )

        if not selected_paper:
            await callback.answer("‚ùå –ì–∞–∑–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        markup = get_menu_newspaper()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≥–∞–∑–µ—Ç—ã
        if selected_paper.get('img_url'):
            await callback.message.answer_photo(
                photo=selected_paper['img_url'],
                caption=(f"üì∞ <b>{selected_paper['title']}</b>"
            ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
        try:
            await callback.message.answer_document(
                document=selected_paper['pdf_url'],
                caption=f"üìÑ <b>–ì–∞–∑–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF</b>\n‚¨ÜÔ∏è –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é",
                reply_markup=markup)
        except TelegramBadRequest as e:
            print(f"PDF Telegram error: {e}")
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram
            if "wrong file identifier" in str(e).lower() or "wrong type" in str(e).lower():
                await callback.message.answer(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞\n"
                    f"üì∞ <b>{selected_paper['title']}</b>\n"
                    f"üîó <a href='{selected_paper['pdf_url']}'>–°–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ</a>",
                    reply_markup=markup
                )
            else:
                await callback.message.answer(
                    '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å PDF —Ñ–∞–π–ª',
                    reply_markup=markup
                )
                
        except Exception as e:
            print(f"PDF general error: {e}")
            await callback.message.answer(
                '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞',
                reply_markup=markup
            )
    except Exception as e:
        print(f"Unexpected error in newspaper selection: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", show_alert=True)
