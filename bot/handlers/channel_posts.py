import asyncio
from aiogram import Router, F
from aiogram.types import Message, InputMediaPhoto, InputMediaVideo, InputMediaDocument
from bot.utils.logger import logger

from bot.db.appeal_bd import get_all_users_tg_id, is_post_sent, mark_post_as_sent

router = Router()
# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–ª—å–±–æ–º–æ–≤
media_groups = {}
# –ß—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –∫–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
processing_groups = set()

"""
–ö–∞–Ω–∞–ª: [–§–æ—Ç–æ1] ‚Üí [–§–æ—Ç–æ2] ‚Üí [–§–æ—Ç–æ3]  (–∞–ª—å–±–æ–º)
          ‚Üì         ‚Üì         ‚Üì
–ë–æ—Ç:   —Å–æ–±–∏—Ä–∞–µ—Ç –≤ media_groups[abc123] = [–§–æ—Ç–æ1, –§–æ—Ç–æ2, –§–æ—Ç–æ3]
          ‚Üì
       –∂–¥–µ—Ç 3 —Å–µ–∫—É–Ω–¥—ã
          ‚Üì
       –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç send_media_group([–§–æ—Ç–æ1, –§–æ—Ç–æ2, –§–æ—Ç–æ3])
          ‚Üì
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–æ–ª—É—á–∞–µ—Ç –æ–¥–∏–Ω –∞–ª—å–±–æ–º —Å —Ç—Ä–µ–º—è —Ñ–æ—Ç–æ
"""
     


@router.channel_post()
async def channel_post_handler(message: Message):
    """–õ–æ–≤–∏–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞."""
    channel_id = message.chat.id
    message_id = message.message_id
    media_group_id = message.media_group_id
    
    logger.info(f"üì¢ –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ {message.chat.title}, MediaGroup: {media_group_id}")

    # –ï—Å–ª–∏ —ç—Ç–æ –∞–ª—å–±–æ–º (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞)
    if media_group_id:
        await handle_media_group(message, channel_id, media_group_id)
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç (–Ω–µ –∞–ª—å–±–æ–º)
        await handle_single_message(message, channel_id, message_id)

async def handle_media_group(message: Message, channel_id: int, media_group_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É"""
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    if media_group_id not in media_groups:
        media_groups[media_group_id] = []
    media_groups[media_group_id].append(message)
    
    # print(f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ –≥—Ä—É–ø–ø—É {media_group_id}. –í—Å–µ–≥–æ: {len(media_groups[media_group_id])}")
    
    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è - –≤—ã—Ö–æ–¥–∏–º
    if media_group_id in processing_groups:
        return
        
    # –ü–æ–º–µ—á–∞–µ–º –≥—Ä—É–ø–ø—É –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
    processing_groups.add(media_group_id)
    
    # –ñ–¥—ë–º 3 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã –∞–ª—å–±–æ–º–∞
    await asyncio.sleep(3.0)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É (–ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è)
    final_group = media_groups.get(media_group_id, [])
    
    if not final_group:
        processing_groups.discard(media_group_id)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–∏ —É–∂–µ —ç—Ç—É –≥—Ä—É–ø–ø—É
    if await is_post_sent(channel_id, media_group_id):
        # print(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {media_group_id} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        # –û—á–∏—â–∞–µ–º
        media_groups.pop(media_group_id, None)
        processing_groups.discard(media_group_id)
        return
    
    # print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≥—Ä—É–ø–ø—ã {media_group_id} –∏–∑ {len(final_group)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    media = []
    for idx, m in enumerate(final_group):
        # –ü–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ —É –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        caption = m.caption if idx == 0 else None
        
        if m.photo:
            media.append(InputMediaPhoto(
                media=m.photo[-1].file_id, 
                caption=caption
            ))
            # print(f"  üì∑ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ {idx + 1}")
        elif m.video:
            media.append(InputMediaVideo(
                media=m.video.file_id, 
                caption=caption
            ))
            # print(f"  üé• –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ {idx + 1}")
        elif m.document:
            media.append(InputMediaDocument(
                media=m.document.file_id, 
                caption=caption
            ))
            # print(f"  üìÑ –î–æ–±–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç {idx + 1}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await get_all_users_tg_id()
    if not users:
        # print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        # –û—á–∏—â–∞–µ–º
        media_groups.pop(media_group_id, None)
        processing_groups.discard(media_group_id)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    success_count = 0
    for user in users:
        try:
            await message.bot.send_media_group(chat_id=user, media=media)
            success_count += 1
            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}", exc_info=True)
    
    # –ü–æ–º–µ—á–∞–µ–º –≥—Ä—É–ø–ø—É –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
    await mark_post_as_sent(channel_id, media_group_id)
    logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ –∏–∑ {len(media)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {success_count}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    
    # –û—á–∏—â–∞–µ–º
    media_groups.pop(media_group_id, None)
    processing_groups.discard(media_group_id)

async def handle_single_message(message: Message, channel_id: int, message_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if await is_post_sent(channel_id, message_id):
        # print(f"‚ö†Ô∏è –ü–æ—Å—Ç {message_id} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        return
    
    users = await get_all_users_tg_id()
    if not users:
        # print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    success_count = 0
    for user in users:
        try:
            await message.copy_to(user)
            success_count += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}", exc_info=True)

    await mark_post_as_sent(channel_id, message_id)
    logger.info(f"‚úÖ –û–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {success_count}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")


     
                
# @router.channel_post()
# async def channel_post_handler(message: Message):
#     # """–õ–æ–≤–∏–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞."""
#     # channel_id = message.chat.id
#     # message_id = message.message_id
    
#     # # –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
#     # if await is_post_sent(channel_id, message_id):
#     #     print(f"‚ö†Ô∏è –ü–æ—Å—Ç {message_id} —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
#     #     return
    
#     print(f"üì¢ –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ {message.chat.title}")
    
#     users = await get_all_users_tg_id()
#     if not users:
#         print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
#         return

#     for user in users:
#         try:
#             await message.copy_to(user)
#             await asyncio.sleep(0.5)
#         except Exception as e:
#             print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {user}: {e}")

#     # # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
#     # await mark_post_as_sent(channel_id, message_id)
#     print("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                