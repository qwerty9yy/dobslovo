"""–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:

–ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ ADMIN_ID.

–ï—Å–ª–∏ ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫–∞–∑.

–õ–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è –¥–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""

import asyncio
import os
import datetime
from bot.filters.admin import IsAdmin
from aiogram import Bot, Router, types, F
from aiogram.types import CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from bot.utils.logger import logger
from bot.db.appeal_bd import get_all_users_tg_id, get_user_count
from bot.keyboards.admin.keyboard import get_add_calendars, get_admin_products, get_admin_start_menu, get_edit_newspapers_photo, get_mailing, get_newsletter_step, get_statistics, get_yes_no_change_calendars, get_yes_no_replace_newspapers_photo
from bot.utils.states import AdminState

admin_router = Router()
admin_router.message.filter(IsAdmin())
admin_router.callback_query.filter(IsAdmin())

MEDIA_PRODUCTS_DIR = "bot/media/products"
MEDIA_NEWSPAPER_DIR = "bot/media/newspaper"

@admin_router.message(Command("admin"))
async def admin_panel(message: types.Message):
    await message.answer("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!", 
                         reply_markup=get_admin_start_menu())

@admin_router.callback_query(F.data == 'back_to_admin')
async def back_to_admin_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!", 
        reply_markup=get_admin_start_menu()
    )
    
@admin_router.callback_query(F.data == 'statistics')
async def admin_menu_statistics(callback: CallbackQuery):
    """–ú–µ–Ω—é –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    count = await get_user_count()
    text = (
        'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n'
        f'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}'
    )
    markup = get_statistics()
    await callback.message.edit_text(text, reply_markup=markup)

@admin_router.callback_query(F.data == 'mailing')
async def admin_menu_mailing(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –†–∞—Å—Å—ã–ª–∫–∞"""
    text = (
        'üì® –†–∞—Å—Å—ã–ª–∫–∞\n\n'
        '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:'
    )
    markup = get_mailing()
    await callback.message.edit_text(text, reply_markup=markup)
    await state.set_state(AdminState.newsletter)

@admin_router.callback_query(F.data == 'cancel_newsletter')
async def admin_cancel_newsletter(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –û—Ç–º–µ–Ω–∞ –†–∞—Å—Å—ã–ª–∫–∞"""
    await state.clear()
    text = '‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'
    await callback.answer(text, show_alert=False)
    await back_to_admin_callback(callback)

@admin_router.message(AdminState.newsletter)
async def admin_newsletter_step(message: types.Message, state:FSMContext, bot: Bot):
    """–ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é"""
    preview_text = (
        "üì® –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."        
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è + –∫–Ω–æ–ø–∫–∏
    await message.send_copy(message.chat.id)
    preview_msg = await message.answer(preview_text, reply_markup=get_newsletter_step())
    
    await state.update_data(
        newsletter_message_id=message.message_id,
        newsletter_chat_id=message.chat.id,
        preview_message_id=preview_msg.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–µ–≤—å—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    )
    
@admin_router.callback_query(F.data == 'start_newsletter')
async def start_newsletter_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    user_data = await state.get_data()
    all_ids = await get_all_users_tg_id()
    total_users = len(all_ids)
    success = 0
    failed = 0
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–≤—å—é
    try:
        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=user_data['preview_message_id']
        )
    except:
        pass
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    progress_msg = await callback.message.answer(
        f'üîÑ –ù–∞—á–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n'
        f"0/{total_users} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"        
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    for i, user_id in enumerate(all_ids, 1):
        try:
            await bot.copy_message(
                chat_id=user_id,
                from_chat_id=user_data['newsletter_chat_id'],
                message_id=user_data['newsletter_message_id']                
            )
            success += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–æ–∫
            if i % 10 == 0 or i == total_users:
                await progress_msg.edit_text(
                    f'üîÑ –†–∞—Å—Å—ã–ª–∫–∞...\n'
                    f"{i}/{total_users} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {failed}"                    
                )
            await asyncio.sleep(0.3)
        except Exception as e:
            failed += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")            
            
    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result_message = (
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}"
    )
    await progress_msg.edit_text(result_message, reply_markup=get_statistics())
    await state.clear()

@admin_router.callback_query(F.data == 'cancel_calendars')
async def admin_cancel_calendars(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –û—Ç–º–µ–Ω–∞ –ó–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    await state.clear()
    await back_to_admin_callback(callback)

@admin_router.callback_query(F.data == 'admin_products')
async def admin_calendars(callback: CallbackQuery):
    """–ú–µ–Ω—é –ó–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∫–ª–∞–º–µ –ö–∞–ª–µ–Ω–¥–∞—Ä–∏"""
    text = (
        "üñº **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏**\n\n"
        "‚ú® –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:\n\n"
        "‚Ä¢ **–î–æ–±–∞–≤–∏—Ç—å** - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º\n"
        "‚Ä¢ **–ò–∑–º–µ–Ω–∏—Ç—å** - —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã–µ\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"        
    )
    markup = get_admin_products()
    await callback.message.edit_text(text, reply_markup=markup, parse_mode='Markdown')
    
@admin_router.callback_query(F.data == 'add_calendars')
async def admin_add_calendars(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –î–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∫–ª–∞–º–µ –ö–∞–ª–µ–Ω–¥–∞—Ä–∏"""
    os.makedirs(MEDIA_PRODUCTS_DIR, exist_ok=True)
    text = (
        'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:'
    )
    await state.set_state(AdminState.add_and_change_calendars)
    markup = get_add_calendars()
    await callback.message.edit_text(text, reply_markup=markup)

@admin_router.message(AdminState.add_and_change_calendars, F.photo)
async def handle_add_products(message: types.Message, state: FSMContext):
    os.makedirs(MEDIA_PRODUCTS_DIR, exist_ok=True)
    for photo in message.photo[-1:]:
        
        file = await message.bot.get_file(photo.file_id)
        filename = f"{datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}_{photo.file_id}.jpg"
        file_path = os.path.join(MEDIA_PRODUCTS_DIR, filename)
        await message.bot.download_file(file.file_path, file_path)
        
    markup = get_statistics()
    await message.answer('‚úÖ –ò–∑—Ä–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', reply_markup=markup)
    await state.clear()

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ (—É–¥–∞–ª—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ)
@admin_router.callback_query(F.data == 'replace_products')
async def admin_replace_products(callback: CallbackQuery):
    text = (
        "‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
        "‚ùóÔ∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —ç—Ç–æ–º –¥–µ–π—Å—Ç–≤–∏–∏?*\n\n"
        "üóëÔ∏è –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –±—É–¥—É—Ç **–±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã**"
    )
    markup = get_yes_no_change_calendars()
    await callback.message.edit_text(text, reply_markup=markup, parse_mode='Markdown')

@admin_router.callback_query(F.data == 'get_started_change_calendars')
async def get_started_change_calendars(callback: types.CallbackQuery, state: FSMContext):
    os.makedirs(MEDIA_PRODUCTS_DIR, exist_ok=True)
    
    listdir = os.listdir(MEDIA_PRODUCTS_DIR)
    for file in listdir:
        os.remove(os.path.join(MEDIA_PRODUCTS_DIR, file))
    
    await state.set_state(AdminState.add_and_change_calendars)
    markup = get_add_calendars()
    await callback.message.edit_text('‚ôªÔ∏è –í—Å–µ —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.',
                                     reply_markup=markup)

@admin_router.callback_query(F.data == 'edit_newspapers_photo')
async def edit_newspapers_photo(callback: CallbackQuery):
    """–ú–µ–Ω—é –ó–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∫–ª–∞–º–µ –ì–∞–∑–µ—Ç–∞"""
    text = (
        "üñº **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≥–∞–∑–µ—Ç—ã –≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏**\n\n"
        "‚ú® –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≥–∞–∑–µ—Ç—ã –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:\n\n"
        "‚Ä¢ **–î–æ–±–∞–≤–∏—Ç—å** - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º\n"
        "‚Ä¢ **–ò–∑–º–µ–Ω–∏—Ç—å** - —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã–µ\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"   
    )
    markup = get_edit_newspapers_photo()
    await callback.message.edit_text(text, reply_markup=markup, parse_mode='Markdown')

@admin_router.callback_query(F.data == 'add_newspapers_photo')
async def admin_add_newspapers_photo(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –î–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∫–ª–∞–º–µ –ì–∞–µ–∑—Ç–∞"""
    os.makedirs(MEDIA_NEWSPAPER_DIR, exist_ok=True)
    text = (
        'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:'
    )
    await state.set_state(AdminState.edit_newspapers_photo)
    markup = get_add_calendars()
    await callback.message.edit_text(text, reply_markup=markup)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ (—É–¥–∞–ª—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ)
@admin_router.callback_query(F.data == 'replace_newspapers_photo')
async def admin_replace_newspapers_photo(callback: CallbackQuery):
    text = (
        "‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
        "‚ùóÔ∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —ç—Ç–æ–º –¥–µ–π—Å—Ç–≤–∏–∏?*\n\n"
        "üóëÔ∏è –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –±—É–¥—É—Ç **–±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã**"
    )
    markup = get_yes_no_replace_newspapers_photo()
    await callback.message.edit_text(text, reply_markup=markup, parse_mode='Markdown')

@admin_router.callback_query(F.data == 'started_replace_newspapers_photo')
async def get_started_replace_newspapers_photo(callback: types.CallbackQuery, state: FSMContext):
    os.makedirs(MEDIA_NEWSPAPER_DIR, exist_ok=True)
    
    listdir = os.listdir(MEDIA_NEWSPAPER_DIR)
    for file in listdir:
        os.remove(os.path.join(MEDIA_NEWSPAPER_DIR, file))
    
    await state.set_state(AdminState.edit_newspapers_photo)
    markup = get_add_calendars()
    await callback.message.edit_text('‚ôªÔ∏è –í—Å–µ —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.',
                                     reply_markup=markup)

@admin_router.message(AdminState.edit_newspapers_photo, F.photo)
async def handle_add_products(message: types.Message, state: FSMContext):
    os.makedirs(MEDIA_NEWSPAPER_DIR, exist_ok=True)
    for photo in message.photo[-1:]:
        
        file = await message.bot.get_file(photo.file_id)
        filename = f"{datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}_{photo.file_id}.jpg"
        file_path = os.path.join(MEDIA_NEWSPAPER_DIR, filename)
        await message.bot.download_file(file.file_path, file_path)
        
    markup = get_statistics()
    await message.answer('‚úÖ –ò–∑—Ä–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', reply_markup=markup)
    await state.clear()