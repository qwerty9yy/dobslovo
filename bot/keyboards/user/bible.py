from functools import lru_cache
from aiogram.utils.keyboard import InlineKeyboardBuilder
import json

MAX_BUTTONS_PER_PAGE = 96  # Telegram –ª–∏–º–∏—Ç (–Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ 100, —Å –∑–∞–ø–∞—Å–æ–º)

@lru_cache
def get_menu_bible():
    ''' –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é "–ë–∏–±–ª–∏—è" Telegram-–±–æ—Ç–∞ ¬´–î–æ–±—Ä–æ–µ –°–ª–æ–≤–æ¬ª. '''
    builder = InlineKeyboardBuilder()
    builder.button(text='üìñ –ë–∏–±–ª–∏—è', callback_data='chapter_help')
    builder.button(text='üîç –ü–æ–∏—Å–∫ –ø–æ –ë–∏–±–ª–∏–∏', callback_data='bible_search')
    builder.button(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')
    builder.adjust(2, 1)
    return builder.as_markup()

@lru_cache
def get_chapter_help():
    ''' –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é "–°–ø–∏—Å–æ–∫ –≥–ª–∞–≤" Telegram-–±–æ—Ç–∞ ¬´–î–æ–±—Ä–æ–µ –°–ª–æ–≤–æ¬ª. ''' 
    builder = InlineKeyboardBuilder()
    builder.button(text='üìñ –í–µ—Ç—Ö–∏–π –ó–∞–≤–µ—Ç', callback_data='chapter_page_old')
    builder.button(text='üìò –ù–æ–≤—ã–π –ó–∞–≤–µ—Ç', callback_data='chapter_page_new')
    builder.button(text='üîç –ü–æ–∏—Å–∫ –ø–æ –ë–∏–±–ª–∏–∏', callback_data='bible_search')
    builder.button(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')
    builder.adjust(2, 1, 1)
    return builder.as_markup()

@lru_cache
def get_chapter_help_by_testament(page_type: str = 'new', page: int = 0):
    ''' –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é "–ù–æ–≤—ã–π, –í–µ—Ç—Ö–∏–π –ó–∞–≤–µ—Ç" Telegram-–±–æ—Ç–∞ ¬´–î–æ–±—Ä–æ–µ –°–ª–æ–≤–æ¬ª. ''' 
    builder = InlineKeyboardBuilder()
    try:
        with open('bot/cache/bible.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
    except FileNotFoundError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        builder.button(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')
        return builder.as_markup()
    
    all_books = list(data.keys())
    
    old_book = []
    new_book = []    
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –í–µ—Ç—Ö–∏–π –∏ –ù–æ–≤—ã–π –ó–∞–≤–µ—Ç
    new_testament_start = None
    for i, book in enumerate(all_books):
        if book == '–ú–∞—Ç—Ñ–µ–π':
            new_testament_start = i
            break
    
    if new_testament_start is not None:
        old_book = all_books[:new_testament_start]
        new_book = all_books[new_testament_start:]
    else:
        # –ï—Å–ª–∏ –≤—Å–µ –∂–µ –Ω–µ –Ω–∞—à–ª–∏, —Ä–∞–∑–¥–µ–ª–∏–º –ø–æ–ø–æ–ª–∞–º (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
        split_index = len(all_books) // 2
        old_book = all_books[:split_index]
        new_book = all_books[split_index:]
        
    # –í—ã–±–∏—Ä–∞–µ–º –∫–Ω–∏–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–≤–µ—Ç–∞
    if page_type == 'old':
        books_list = old_book
    else:
        books_list = new_book      
    
    for book_name in books_list:
        builder.button(text=f'{book_name}', callback_data=f'book_name_{page_type}_{book_name}')
    
    builder.button(text='üïäÔ∏è –í—ã–±–æ—Ä "–ó–∞–≤–µ—Ç–∞"', callback_data='chapter_help')
    builder.button(text='üîç –ü–æ–∏—Å–∫ –ø–æ –ë–∏–±–ª–∏–∏', callback_data='bible_search')
    builder.button(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')
    if page_type == 'old':
        builder.adjust(*[2]*19, 1, 2, 1)
    else:
        builder.adjust(*[2]*13, 1, 2, 1)
    return builder.as_markup()

@lru_cache
def get_book_name_keyboard(book_name, testament_type='old', page: int = 1):
    ''' –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é "–° –≤—ã–±–æ—Ä–æ–º –≥–ª–∞–≤" Telegram-–±–æ—Ç–∞ ¬´–î–æ–±—Ä–æ–µ –°–ª–æ–≤–æ¬ª. ''' 
    builder = InlineKeyboardBuilder()
    try:
        with open('bot/cache/bible.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
        chapters = list(data[book_name].keys())
    except (FileNotFoundError, KeyError):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        builder.button(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')
        return builder.as_markup()
    
    total_chapters = len(chapters)
    total_pages = (total_chapters + MAX_BUTTONS_PER_PAGE - 1) // MAX_BUTTONS_PER_PAGE
    start = (page - 1) * MAX_BUTTONS_PER_PAGE
    end = start + MAX_BUTTONS_PER_PAGE
    page_chapters = chapters[start:end]
     
    for chapter in page_chapters:
        builder.button(text=f'{chapter}', callback_data=f'chapter_{book_name}_{chapter}')
    
    nav_row = []
    if page > 1:
        nav_row.append({"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "data": f"chapters_page_{book_name}_{page - 1}"})
    if page < total_pages:
        nav_row.append({"text": "‚û°Ô∏è –î–∞–ª–µ–µ", "data": f"chapters_page_{book_name}_{page + 1}"})
        
    for btn in nav_row:
        builder.button(text=btn["text"], callback_data=btn["data"])
    
    
    testament_text = "‚Ü©Ô∏è –í–µ—Ç—Ö–∏–π –ó–∞–≤–µ—Ç" if testament_type == 'old' else "‚Ü©Ô∏è –ù–æ–≤—ã–π –ó–∞–≤–µ—Ç"
    builder.button(text=testament_text, callback_data=f'chapter_page_{testament_type}')
    builder.button(text='üïäÔ∏è –í—ã–±–æ—Ä "–ó–∞–≤–µ—Ç–∞"', callback_data='chapter_help')
    builder.button(text='üîç –ü–æ–∏—Å–∫ –ø–æ –ë–∏–±–ª–∏–∏', callback_data='bible_search')
    builder.adjust(3) 
    return builder.as_markup()


@lru_cache
def get_chapter_selection(book_name, current_chapter, total_chapters):
    ''' –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é "–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–º –≥–ª–∞–≤" Telegram-–±–æ—Ç–∞ ¬´–î–æ–±—Ä–æ–µ –°–ª–æ–≤–æ¬ª. ''' 
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–ª–∞–≤–∞–º
    if current_chapter > 1:
        builder.button(text='‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data=f'chapter_{book_name}_{current_chapter - 1}')
    if current_chapter < total_chapters:
        builder.button(text='–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', callback_data=f'chapter_{book_name}_{current_chapter + 1}')
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    builder.button(text='‚¨ÖÔ∏è –ö –≥–ª–∞–≤–∞–º', callback_data=f'book_name_back_{book_name}')
    builder.button(text='üïäÔ∏è –í—ã–±–æ—Ä "–ó–∞–≤–µ—Ç–∞"', callback_data='chapter_help')
    builder.button(text='üîç –ü–æ–∏—Å–∫ –ø–æ –ë–∏–±–ª–∏–∏', callback_data='bible_search')
    
       # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    if current_chapter > 1 and current_chapter < total_chapters:
        # –ï—Å—Ç—å –æ–±–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        builder.adjust(2, 2, 1)
    elif current_chapter > 1 or current_chapter < total_chapters:
        # –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        builder.adjust(1, 2, 1)
    else:
        # –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –≥–ª–∞–≤–∞)
        builder.adjust(2, 1)
    
    return builder.as_markup()

@lru_cache
def get_bible_search():
    ''' –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é "–ü–æ–∏—Å–∫ –ø–æ –ë–∏–±–ª–∏–∏" Telegram-–±–æ—Ç–∞ ¬´–î–æ–±—Ä–æ–µ –°–ª–æ–≤–æ¬ª. ''' 
    builder = InlineKeyboardBuilder()
    builder.button(text='üìñ –ë–∏–±–ª–∏—è', callback_data='chapter_help')
    builder.button(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')
    builder.adjust(1)
    return builder.as_markup()

@lru_cache
def get_bible_search_word():
    ''' –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é "–ü–æ–∏—Å–∫ –ø–æ –ë–∏–±–ª–∏–∏ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Å–ª–æ–≤–∞" Telegram-–±–æ—Ç–∞ ¬´–î–æ–±—Ä–æ–µ –°–ª–æ–≤–æ¬ª. ''' 
    builder = InlineKeyboardBuilder()
    builder.button(text='üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data='bible_search')
    builder.button(text='üìñ –ë–∏–±–ª–∏—è', callback_data='chapter_help')
    builder.button(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')
    builder.adjust(1)
    return builder.as_markup()